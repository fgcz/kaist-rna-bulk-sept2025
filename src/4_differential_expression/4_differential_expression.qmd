---
title: "Part 4: Differential Expression and Pathway Enrichment"
format:
  html:
    embed-resources: true
    toc: true
    toc-location: left
    toc-depth: 3
    title-block-banner: "#00A7FF"
    css: url(../style.css)
editor: visual
bibliography: references.bib
---

# Differential Expression Analysis

In this section, we will use the count data from Kallisto from the previous part, redo some of the QC, and perform the differential expression analysis using DESeq2[@DESeq2]. This part is adapted from the official DESeq2 [vignette](http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html), available on Bioconductor, so feel free to look there for additional information.

## Preparing data

```{r}
suppressPackageStartupMessages({
  library(SummarizedExperiment)
  library(pheatmap)
  library(RColorBrewer)
  library(stringr)
  library(plotly)
  library(tidyverse)
  library(tximport)
  library(DESeq2)
})
source("../helpers.R")
```

Let's download data. These counts should be mostly identical to the results we produced ourselves in the last step but are provided here as a download for convenience.

```{bash}
CURR_DIR=$(pwd)
cd ../..

# Download the data
KALLISTO_OUTDIR=results/3_quant/kallisto
mkdir -p $KALLISTO_OUTDIR

# change to kallisto dir and delete contents if there are any
cd $KALLISTO_OUTDIR
rm -f ./*

# Download data
echo "Depositing data in "$KALLISTO_OUTDIR
curl -O https://fgcz-gstore.uzh.ch/public/RNASeqCourse/processed_yeast_kallisto_counts.tar

# Extract data
tar -xvf processed_yeast_kallisto_counts.tar
rm -f processed_yeast_kallisto_counts.tar

# Back home
cd $CURR_DIR
```

First, let's create our meta-information frame and load in the gtf file.

```{r}
# Define meta dataframe for later use
meta <- data.frame(
  Condition=as.factor(rep(c("Glucose", "GlycEth"), each=4)),
  row.names=c(paste0("G", 1:4), paste0("GE", 1:4))
)
```

::: callout-note
### On `Condition` factor levels

R will choose a reference level for factors based on alphabetical order. Then, once we do the differential expression with DESeq2, you will never tell the DESeq2 functions which level you want to compare against (e.g. which level represents the control group), the comparisons will be based on the alphabetical order of the levels. There are two solutions: you can either explicitly tell results which comparison to make using the contrast argument (this will be shown later), or you can explicitly set the factors levels. In order to see the change of reference levels reflected in the results names, you need to either run `DESeq` or `nbinomWaldTest`/`nbinomLRT` after the re-leveling operation.

In our case, we are lucky in that the Glucose group comes before GlycEth alphabetically and is therefore already set as the reference, and subsequently is the first term when you run `levels(meta$Condition)`. Try it out for yourself.
:::

Again, load the by-transcript gtf file to aid us in the annotation of our Kallisto results.

```{r}
# Load the annotation
seqAnno <- getFeatureAnnotation("../../data/supplementary-files/Ensembl_R64_genes/genes_annotation_byTranscript.txt", dataFeatureType="transcript")
seqAnno <- seqAnno[seqAnno$type %in% "protein_coding", ]
```

Next, we load the counts using `tximport` , a convenience function for loading in count data from a variety of sources (Salmon, Kallisto, featureCounts, etc.) which also performs the aggregation of transcript counts to the gene level (remember that Kallisto produced count files on the transcript level).

```{r}
# Get the files
kallistoFiles <- file.path("../../results/3_quant/kallisto", paste0(rownames(meta), ".txt"))
names(kallistoFiles) <- rownames(meta)
stopifnot(all(file.exists(kallistoFiles)))  # Ensure we have all the files
kallistoFiles

# Use tximport to load the counts
txiKallisto <- tximport(kallistoFiles, type = "kallisto", tx2gene = seqAnno, ignoreAfterBar = TRUE, txIdCol = "transcript_id", geneIdCol = "gene_id")
```

Take a quick look at the `txiKallisto` object we generated and take a look at the rownames. Contrast this to the rownames in the raw files.

```{r}
# Your code here
```

::: {.callout-note appearance="simple"}
`txiKallisto` is a simple list with matrices, `"abundance"`, `"counts"`, and `"length"`, where the transcript level information is summarized to the gene-level. Typically, abundance is provided by the quantification tools as TPM (transcripts-per-million), while the counts are estimated counts (possibly fractional), and the `"length"` matrix contains the effective gene lengths.
:::

Finally, let's construct a *DESeqDataSet* from the `txi` object and sample information in `meta`

```{r}
dds <- DESeq2::DESeqDataSetFromTximport(txiKallisto,
                                        colData=meta,
                                        design=~Condition)
dds
```

Let's filter as before, taking into account the grouping of the samples.

```{r}
sigThresh <- 10
isPresent <- counts(dds) > sigThresh
isPresentCond <- rowsum(t(isPresent * 1), group=meta$Condition)
isPresentCond <- t(sweep(isPresentCond, 1,
                         table(meta$Condition)[rownames(isPresentCond)], FUN="/")) >= 0.5
isValid <- rowMeans(isPresentCond) >= 0.5
dds <- dds[isValid,]
```

## Performing the DE

The standard differential expression analysis steps are wrapped into a single function, `DESeq`. The estimation steps performed by this function are described below, in the manual page for `?DESeq` .

```{r}
dds <- DESeq(dds)
res <- results(dds)
res
```

::: callout-note
Results tables are generated using the function `results`, which extracts a results table with log2 fold changes, p-values and adjusted p-values. With no additional arguments to results, the log2 fold change and Wald test p-value will be for the last variable in the design formula, and if this is a factor, the comparison will be the last level of this variable over the reference level (see previous note on factor levels).
:::

Next, let's take a closer look at the results.

### Exercise #1

1.  What are the columns of the object?
2.  What was the method used for p-value correction?
3.  How many significantly-expressed genes are there assuming we consider genes differentially expressed if `p <= 0.01` and `log2FoldChange >= 0.5` ?

::: {.callout-tip collapse="true" appearance="simple"}
## Solutions

1.  The columns most interesting to us are pvalue, padj (adjusted p-value), and log2FoldChange. Some other columns include `lfcSE`, which gives the standard error of the `log2FoldChange` and `stat`, which gives the Wald statistic. See ?results for more information.
2.  
:::

```{r}
resOrdered <- res[order(res$pvalue),]
```
