---
title: "Part 3: Quantification"
format: html
editor: visual
---

# Methods for Quantification

In this tutorial, we will perform quantification

## FeatureCounts

```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(Rsubread)
  library(stringr)
})
source("../helpers.R")
```

#### Set-up

First, we need to subset the annotation (gtf) file to include only protein-coding genes. There are a few reasons why we might rather exclude transcript types such as lncRNA and snRNA.

-   Including these other transcript types increase the number of tests, meaning more false positives, and less power to detect protein-coding genes

-   non-coding RNAs do not have poly-A tails and can't be detected with mRNA sequencing, so their absence might be misinterpreted

-   They are sometimes not well annotated

In general, a good strategy is to exclude them by default and include them by demand (i.e. if the research question explicitly demands it). Let's do this subsetting now.

```{r}
seqAnno <- getFeatureAnnotation("../../data/supplementary-files/Ensembl_R64_genes/genes_annotation_byTranscript.txt", dataFeatureType="transcript")
transcriptsUse = rownames(seqAnno)[seqAnno$type %in% "protein_coding"]
gtf <- readGff("../../data/supplementary-files/Ensembl_R64_genes/genes.gtf")
transcripts <- getGffAttributeField(gtf$attributes,
                                    field="transcript_id", 
                                    attrsep="; *", valuesep=" ")
transcriptsUse = union(transcriptsUse, setdiff(transcripts, rownames(seqAnno))) ## add those where we have no info, e.g. spikes
gtf = gtf[transcripts %in% transcriptsUse, ]

tmpOutDir <- "../../data/tmp"
# We create the tmp directory if it does not exist
dir.create(tmpOutDir, showWarnings=FALSE, recursive=TRUE)

# Save the subset GTF
gtfFile <- file.path(tmpOutDir, "genes_protein_coding.gtf")
write.table(gtf, gtfFile, quote=FALSE, sep="\t", row.names=FALSE, col.names=FALSE)
```

#### Run `featureCounts`

We are now ready to run `featureCounts` from the Rsubread package.

```{r}
bamFiles <- Sys.glob(file.path("../../results/2_mapping/STAR_alignment", "*bam"))
outputDir <- "../../results/3_quant/featureCounts"
dir.create(outputDir, showWarnings=FALSE, recursive=TRUE)

for (bamFile in bamFiles) {
  sampleName <- tools::file_path_sans_ext(basename(bamFile))
  outputPrefix <- file.path(outputDir, sampleName)
  
  countResult = Rsubread::featureCounts(
    bamFile, 
    annot.inbuilt=NULL,
    annot.ext=gtfFile,
    isGTFAnnotationFile=TRUE,
    GTF.featureType="exon",
    GTF.attrType="gene_id",
    useMetaFeatures=TRUE,
    allowMultiOverlap=TRUE,
    isPairedEnd=FALSE, 
    nthreads=8, 
    strandSpecific=2,
    minMQS=10,
    minOverlap=10,
    primaryOnly=TRUE
  )
  colnames(countResult$counts) = "matchCounts"
  cnts <- countResult$counts %>% as.data.frame() %>% rownames_to_column("Identifier")
  data.table::fwrite(cnts, file=paste0(outputPrefix, ".txt"), sep="\t")
  colnames(countResult$stat) = c("Status", "Count")
  sts <- countResult$stat %>% as.data.frame()
  data.table::fwrite(sts, file=paste0(outputPrefix, "-stats.txt"), sep="\t")
}
```

#### Clean-up STAR bams

We clean up the STAR output to save space.

```{bash}
rm -rf ../../results/2_mapping/STAR_alignment
```

## Kallisto

Next, we will perform the quantification using Kallisto and see how its performance compares against STAR. As Kallisto is a command-line tool, all code in this section will be again bash-based.

#### Download trimmed data

As we did for previous parts, we will download the fastp-processed data to save time. In case you executed the previous script and still have the files there, feel free to skip this step. Just make sure you deposit the files in the location specified in the script below.

```{bash}
CURR_DIR=$(pwd)
cd ../..

# Download the data
FASTP_OUTDIR=results/1_qc/fastp
mkdir -p $FASTP_OUTDIR
cd $FASTP_OUTDIR
echo "Depositing data in "$FASTP_OUTDIR
curl -O https://fgcz-gstore.uzh.ch/public/RNASeqCourse/processed_yeast_fastp.tar

# Extract data
tar -xvf processed_yeast_fastp.tar
rm -f processed_yeast_fastp.tar

# Back home
cd $CURR_DIR
```

Now that we have downloaded the data, we are ready to perform the quantification with Kallisto. Execute the script below.

```{bash}
CURR_DIR=$(pwd)
cd ../..

FASTP_OUTDIR=results/1_qc/fastp
KALLISTO_OUTDIR=results/3_quant/kallisto
mkdir -p $KALLISTO_OUTDIR

# Start processing with kallisto
for FASTQ in $FASTP_OUTDIR/*_R1.fastq.gz
  do SAMPLE_NAME=$(basename ${FASTQ%_trimmed_R1.fastq.gz})
  echo $SAMPLE_NAME
  /opt/kallisto quant \
    -i data/supplementary-files/Ensembl_R64_genes_protein_coding_kallistoIndex/transcripts.idx \
    -o $KALLISTO_OUTDIR -t 4 --bias --bootstrap-samples 10 --seed 42 \
    --single --rf-stranded --fragment-length 180 --sd 50 $FASTQ \
    2> $KALLISTO_OUTDIR/$SAMPLE_NAME"_kallisto.stderr" > $KALLISTO_OUTDIR/$SAMPLE_NAME"_kallisto.stdout"
  mv $KALLISTO_OUTDIR/abundance.tsv $KALLISTO_OUTDIR/$SAMPLE_NAME".txt"
  mv $KALLISTO_OUTDIR/run_info.json $KALLISTO_OUTDIR/$SAMPLE_NAME".json"
done

# Back home
cd $CURR_DIR
```
