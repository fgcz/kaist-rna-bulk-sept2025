---
title: "Part 3: Quantification"
format: html
editor: visual
---

## FeatureCounts

```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(Rsubread)
  library(stringr)
})
source("../helpers.R")
```

#### Set-up

First, we need to subset the annotation (gtf) file to include only protein-coding genes. There are a few reasons why we might rather exclude transcript types such as lncRNA and snRNA.

-   Including these other transcript types increase the number of tests, meaning more false positives, and less power to detect protein-coding genes

-   non-coding RNAs do not have poly-A tails and can't be detected with mRNA sequencing, so their absence might be misinterpreted

-   They are sometimes not well annotated

In general, a good strategy is to exclude them by default and include them by demand (i.e. if the research question explicitly demands it). Let's do this subsetting now.

```{r}
seqAnno <- getFeatureAnnotation("../../data/supplementary-files/Ensembl_R64_genes/genes_annotation_byTranscript.txt", dataFeatureType="transcript")
transcriptsUse = rownames(seqAnno)[seqAnno$type %in% "protein_coding"]
gtf <- readGff("../../data/supplementary-files/Ensembl_R64_genes/genes.gtf")
transcripts <- getGffAttributeField(gtf$attributes,
                                    field="transcript_id", 
                                    attrsep="; *", valuesep=" ")
transcriptsUse = union(transcriptsUse, setdiff(transcripts, rownames(seqAnno))) ## add those where we have no info, e.g. spikes
gtf = gtf[transcripts %in% transcriptsUse, ]

tmpOutDir <- "../../data/tmp"
# We create the tmp directory if it does not exist
dir.create(tmpOutDir, showWarnings=FALSE, recursive=TRUE)

# Save the subset GTF
gtfFile <- file.path(tmpOutDir, "genes_protein_coding.gtf")
write.table(gtf, gtfFile, quote=FALSE, sep="\t", row.names=FALSE, col.names=FALSE)
```

#### Run `featureCounts`

We are now ready to run `featureCounts` from the Rsubread package.

```{r}
bamFiles <- Sys.glob(file.path("../../results/2_mapping/STAR_alignment", "*bam"))
bamFile <- bamFiles[1]
for (bamFile in bamFiles) {
  countResult = featureCounts(bamFile, 
                            annot.inbuilt=NULL,
                            annot.ext=gtfFile,
                            isGTFAnnotationFile=TRUE,
                            GTF.featureType="exon",
                            GTF.attrType="gene_id",
                            useMetaFeatures=TRUE,
                            allowMultiOverlap=TRUE,
                            isPairedEnd=FALSE, 
                            requireBothEndsMapped=FALSE,
                            checkFragLength=FALSE,
                            minFragLength=50,
                            maxFragLength=600,
                            nthreads=4, 
                            strandSpecific=2,
                            minMQS=10,
                            readExtension5=0,readExtension3=0,read2pos=NULL,
                            minOverlap=10,
                            ignoreDup=FALSE,
                            splitOnly=FALSE,
                            countMultiMappingReads=TRUE,
                            fraction=FALSE,
                            primaryOnly=TRUE,
                            countChimericFragments=TRUE,chrAliases=NULL,
                            reportReads=NULL)
}
```
